
oszi-tests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000709  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000646  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024a  00000000  00000000  00000ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	return i*i&i;
}

int main(void)
{
	DDR(B)=1<<5;
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
			for(int i = 0; i < 100; i++){
				//waste_time(i);
			}
			
		}
		PORT(B)=1<<5;
  84:	40 e2       	ldi	r20, 0x20	; 32
int waste_time(int i){
	return i*i&i;
}

int main(void)
{
  86:	20 e4       	ldi	r18, 0x40	; 64
  88:	3f e1       	ldi	r19, 0x1F	; 31
  8a:	05 c0       	rjmp	.+10     	; 0x96 <main+0x16>
  8c:	01 97       	sbiw	r24, 0x01	; 1
	DDR(B)=1<<5;
    /* Replace with your application code */
    while (1) 
    {
		for(int i = 0; i < 8000; i++){
			for(int i = 0; i < 100; i++){
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0xc>
  90:	21 50       	subi	r18, 0x01	; 1
  92:	31 09       	sbc	r19, r1
{
	DDR(B)=1<<5;
    /* Replace with your application code */
    while (1) 
    {
		for(int i = 0; i < 8000; i++){
  94:	19 f0       	breq	.+6      	; 0x9c <main+0x1c>
int waste_time(int i){
	return i*i&i;
}

int main(void)
{
  96:	84 e6       	ldi	r24, 0x64	; 100
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	f8 cf       	rjmp	.-16     	; 0x8c <main+0xc>
			for(int i = 0; i < 100; i++){
				//waste_time(i);
			}
			
		}
		PORT(B)=1<<5;
  9c:	45 b9       	out	0x05, r20	; 5
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3f e1       	ldi	r19, 0x1F	; 31
  a2:	05 c0       	rjmp	.+10     	; 0xae <main+0x2e>
  a4:	01 97       	sbiw	r24, 0x01	; 1
		for(int i = 0; i < 8000; i++){
			for(int i = 0; i < 1000; i++){
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x24>
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	31 09       	sbc	r19, r1
				//waste_time(i);
			}
			
		}
		PORT(B)=1<<5;
		for(int i = 0; i < 8000; i++){
  ac:	19 f0       	breq	.+6      	; 0xb4 <main+0x34>
int waste_time(int i){
	return i*i&i;
}

int main(void)
{
  ae:	88 ee       	ldi	r24, 0xE8	; 232
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	f8 cf       	rjmp	.-16     	; 0xa4 <main+0x24>
			for(int i = 0; i < 1000; i++){
				//waste_time(i);
			}
			
		}
		PORT(B)=0;
  b4:	15 b8       	out	0x05, r1	; 5
    }
  b6:	e7 cf       	rjmp	.-50     	; 0x86 <main+0x6>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
