
oszi-tests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001f8  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e8  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000677  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  000011ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e3  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  00001927  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_11>
  30:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_12>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000068 <SERVO_PIN>:
  68:	01 02 04 08                                         ....

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e8 ef       	ldi	r30, 0xF8	; 248
  80:	f1 e0       	ldi	r31, 0x01	; 1
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a8 30       	cpi	r26, 0x08	; 8
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a8 e0       	ldi	r26, 0x08	; 8
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	ac 30       	cpi	r26, 0x0C	; 12
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  a2:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <clock_inc>:
unsigned char precount=0;
unsigned int seconds=0;


void clock_inc(){ // kleine ungenaue uhr die mitläuft
	if(++precount) return;
  aa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <precount>
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	19 f0       	breq	.+6      	; 0xb8 <clock_inc+0xe>
  b2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <precount>
  b6:	08 95       	ret
	precount=CLK_PRECOUNT;
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <precount>
	seconds++;
  be:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seconds>
  c2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <seconds+0x1>
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <seconds+0x1>
  cc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <seconds>
	if(seconds%2) PORT(B)=1<<5;
  d0:	80 ff       	sbrs	r24, 0
  d2:	03 c0       	rjmp	.+6      	; 0xda <clock_inc+0x30>
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	08 95       	ret
	else PORT(B)=0;
  da:	15 b8       	out	0x05, r1	; 5
  dc:	08 95       	ret

000000de <sleep>:
unsigned int servo_mid_ram[SERVO_COUNT]={1500,1500,1500,1500};
unsigned int servo_min_ram[SERVO_COUNT];
unsigned int servo_max_ram[SERVO_COUNT];

void sleep(){
	set_sleep_mode(SLEEP_MODE_IDLE);//setup IDLE mode. only 1/4 powerconsumption
  de:	83 b7       	in	r24, 0x33	; 51
  e0:	81 7f       	andi	r24, 0xF1	; 241
  e2:	83 bf       	out	0x33, r24	; 51
	sleep_mode();//goto sleep
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	83 bf       	out	0x33, r24	; 51
  ea:	88 95       	sleep
  ec:	83 b7       	in	r24, 0x33	; 51
  ee:	8e 7f       	andi	r24, 0xFE	; 254
  f0:	83 bf       	out	0x33, r24	; 51
  f2:	08 95       	ret

000000f4 <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	PORT(C)|=SERVO_PIN[servo_index];
 116:	98 b1       	in	r25, 0x08	; 8
 118:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	e8 59       	subi	r30, 0x98	; 152
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	80 81       	ld	r24, Z
 124:	89 2b       	or	r24, r25
 126:	88 b9       	out	0x08, r24	; 8
	OCR1B=servo_buffer[servo_index++];
 128:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	8e 0f       	add	r24, r30
 130:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	e0 50       	subi	r30, 0x00	; 0
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	80 81       	ld	r24, Z
 140:	91 81       	ldd	r25, Z+1	; 0x01
 142:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 146:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	servo_index&=0x0F;
 14a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 14e:	8f 70       	andi	r24, 0x0F	; 15
 150:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	// reset timer1
	clock_inc();
 154:	0e 94 55 00 	call	0xaa	; 0xaa <clock_inc>
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	7f 91       	pop	r23
 166:	6f 91       	pop	r22
 168:	5f 91       	pop	r21
 16a:	4f 91       	pop	r20
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_12>:

ISR (TIMER1_COMPB_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
	PORT(C)&=0xF0;
 186:	88 b1       	in	r24, 0x08	; 8
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	88 b9       	out	0x08, r24	; 8
	// servocontrol

}
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <init>:
void init(){
	DDR(B)=1<<5;
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	84 b9       	out	0x04, r24	; 4
	DDR(C) = 0x0F; // Servo out
 19c:	8f e0       	ldi	r24, 0x0F	; 15
 19e:	87 b9       	out	0x07, r24	; 7
	CONFIG_BYTE(TCCR1A , 0 , BIT(WGM10) | BIT(WGM11) | BIT(COM1A1) | BIT(COM1B1));// CTC Mode mode TOP determined by OCR1A //
 1a0:	e0 e8       	ldi	r30, 0x80	; 128
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	8c 75       	andi	r24, 0x5C	; 92
 1a8:	80 83       	st	Z, r24
	CONFIG_BYTE(TCCR1B , BIT(WGM12) | BIT(CS11) , BIT(CS10) | BIT(CS12) | BIT(WGM13));    // set prescaler to 1/8
 1aa:	e1 e8       	ldi	r30, 0x81	; 129
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 7e       	andi	r24, 0xE0	; 224
 1b2:	8a 60       	ori	r24, 0x0A	; 10
 1b4:	80 83       	st	Z, r24
	CONFIG_BYTE(TIFR1 , BIT(OCF1A) | BIT(OCF1B),0);
 1b6:	86 b3       	in	r24, 0x16	; 22
 1b8:	86 60       	ori	r24, 0x06	; 6
 1ba:	86 bb       	out	0x16, r24	; 22
	CONFIG_BYTE(TIMSK1 , BIT(OCIE1A)|BIT(OCIE1B), 0);
 1bc:	ef e6       	ldi	r30, 0x6F	; 111
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	86 60       	ori	r24, 0x06	; 6
 1c4:	80 83       	st	Z, r24
	OCR1A = 5000;      // set count to 1500 us - 90 degree
 1c6:	88 e8       	ldi	r24, 0x88	; 136
 1c8:	93 e1       	ldi	r25, 0x13	; 19
 1ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 1500;      // set count to 1500 us - 90 degree
 1d2:	8c ed       	ldi	r24, 0xDC	; 220
 1d4:	95 e0       	ldi	r25, 0x05	; 5
 1d6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1da:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCNT1 = 0;         // reset timer
 1de:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1e2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	sei();
 1e6:	78 94       	sei
 1e8:	08 95       	ret

000001ea <main>:
}


int main(void)
{
	init();
 1ea:	0e 94 cc 00 	call	0x198	; 0x198 <init>
    /* Replace with your application code */
    while (1) 
    {
		sleep();
 1ee:	0e 94 6f 00 	call	0xde	; 0xde <sleep>
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <main+0x4>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
